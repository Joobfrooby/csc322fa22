const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

camera.position.z = 15;

const geometry = new THREE.Geometry();

const vertices = [
    new THREE.Vector3(3, 3, 3),
    new THREE.Vector3(-3, -3, 3),
    new THREE.Vector3(-3, 3, -3),
    new THREE.Vector3(3, -3, -3)
];

geometry.vertices = vertices;

geometry.faces.push(new THREE.Face3(0, 2, 3));
geometry.faces.push(new THREE.Face3(1, 2, 3));
geometry.faces.push(new THREE.Face3(0, 1, 2));
geometry.faces.push(new THREE.Face3(0, 1, 3));

const material = new THREE.MeshBasicMaterial({
    color: 0x83F4FF,
    wireframe: true
});

const tetrahedron = new THREE.Mesh(geometry, material);
scene.add(tetrahedron);
renderer.render(scene, camera);
